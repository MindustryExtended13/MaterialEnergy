apply plugin: "java"
version '1.5.0'

targetCompatibility = 8
sourceCompatibility = JavaVersion.VERSION_16

sourceSets.main {
    java.srcDirs = ["src"]
    resources.srcDirs = ["assets"]
}

repositories {
    mavenCentral()

    maven {
        url 'https://www.jitpack.io'
    }
}

ext {
    ME13CoreVersion = 'v1.5'
    modCoreVersion = '1.0.6b'
    mindustryVersion = 'v144.3'
    jabelVersion = "93fde537c7"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

allprojects {
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs.addAll(['--release', '8'])
        }
    }
}

dependencies {
    //core
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.MindustryJitpack:core:$mindustryVersion"

    implementation "com.github.MindustryExtended13.Me13Core:items:$ME13CoreVersion"
    implementation "com.github.MindustryExtended13.Me13Core:block:$ME13CoreVersion"
    implementation "com.github.MindustryExtended13.Me13Core:text-draw:$ME13CoreVersion"
    implementation "com.github.MindustryExtended13.Me13Core:intergration:$ME13CoreVersion"
    implementation "com.github.MindustryExtended13.Me13Core:configuration:$ME13CoreVersion"

    compileOnly 'org.jetbrains:annotations:23.0.0'
    implementation "com.google.code.gson:gson:2.10.1"
}

//force arc version
configurations.configureEach {
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc') {
            details.useVersion "$mindustryVersion"
        }
    }
}

task jarAndroid {
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot as String).exists()) throw new GradleException(
                "No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory."
        )

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{
            f -> new File(f, "android.jar").exists()
        }

        if(!platformRoot) throw new GradleException(
                "No android.jar found. Ensure that you have an Android platform installed."
        )

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() +
                configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{

            "--classpath $it.path"
        }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        """$sdkRoot/build-tools/30.0.3/d8.bat $dependencies --min-api 14 --output 
${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"""
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar {
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    from(rootDir) {
        include "mod.json"
        include "icon.png"
    }
}

task deploy(type: Jar) {
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from {[
            zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"),
            zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")
    ]}

    doLast {
        delete {
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}

task zipJar(type: Jar) {
    archiveFileName = "${project.archivesBaseName}Desktop.zip"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    from("$buildDir/classes/java/main") {
        include "**"
    }

    from("$buildDir/resources/main") {
        include "**"
    }

    from(rootDir) {
        include "mod.json"
        include "icon.png"
    }

    dependsOn 'jar'
}